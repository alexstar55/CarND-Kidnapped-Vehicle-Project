%% This is the same algorithm with the kidnapped algorithm. By using the matlab autonomous driving vehicle toolbox, driving scenario is
% constructed. Radar sensor is used for calculate distance and orientation of the target. Acotor 'human 'is used as fixed position beacons.
% from the simulation result, it can be found that, filter is filtering the noise.
% 'errror of estimation' : 4.8001, 
% 'error of noise' : 9.2685
    
clc
clear
close all

% Create the drivingScenario object and ego car
[sc, car] = createDrivingScenario;

% Create all the sensors
[sensors, numSensors] = createSensors(sc);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {});

plot(sc)
chasePlot(car)

bep = birdsEyePlot('XLim',[-60 60],'YLim',[-60 60]);
olPlotter = outlinePlotter(bep);
lblPlotter = laneBoundaryPlotter(bep,'Color','r','LineStyle','-');
lbrPlotter = laneBoundaryPlotter(bep,'Color','g','LineStyle','-');
rbsEdgePlotter = laneBoundaryPlotter(bep);
legend('off');

running = true;
%% preallocation of essential parameters.
%----------------------ming setting------------------------
i = 1
delta_t = 0.1;

log_x = zeros(1,300);
log_y = zeros(1,300);

particles_num = 500;

v_x_mu = 0;
v_x_sigma = 0.3;% uda is 0.3

v_y_mu = 0;
v_y_sigma = 0.3;% uda is 0.3

v_yaw_mu = 0;
v_yaw_sigma = 0.1;%% uda is 0.01

% b_x_mu = 0;
% b_x_sigma = 3;% uda is 0.3
% 
% b_y_mu = 0;
% b_y_sigma = 3;% uda is 0.3

stdLandmarkRange = 0.3;
stdLandmarkBearing = 0.3;

size_b = size(sc.Actors);
size_b = size_b(2) - 1;

v_x_gt = zeros(1,particles_num);
v_y_gt = zeros(1,particles_num);
v_yaw_gt = zeros(1,particles_num);
v_yaw_rate_gt = zeros(1,particles_num);

v_x_noise = zeros(1,particles_num);
v_y_noise = zeros(1,particles_num);
v_yaw_noise = zeros(1,particles_num);

b_x_gt = zeros(1,size_b);
b_y_gt = zeros(1,size_b);
b_ori = zeros(1, size_b);%orientation
b_x_rel = zeros(1,size_b);
b_y_rel = zeros(1,size_b);

dx_log = zeros(1,size_b);
dy_log = zeros(1,size_b);

particles_yaw = zeros(1,particles_num);
particles_x = zeros(1,particles_num);
particles_y = zeros(1,particles_num);

b_weights = zeros(1, particles_num);

f_x_log = zeros(1,1000);
f_y_log = zeros(1,1000);
f_yaw_log = zeros(1,1000);

weights_log = zeros(1,particles_num);

prob_cons_part_log = zeros(1, size_b);
prob_exp_part_log = zeros(1,size_b);
multi_variable_guassian_distribution_log = zeros(1, size_b);

error_estimation = zeros(1,1000);
error_noise = zeros(1,1000);

test_x = zeros(1,1000);
test_y = zeros(1,1000);

initialized = 0;

% obj1_x = zeros(1,300);
% obj1_y = zeros(1,300);
% obj1_yaw = zeros(1,300);
% obj2_x = zeros(1,300);
% obj2_y = zeros(1,300);
% obj2_yaw = zeros(1,300);
%% main vehicle running loop
while advance(sc)
    %% plot setting for autonomous driving scenario
    % Generate the target poses of all actors relative to the ego vehicle
    poses = targetPoses(car);
    time  = sc.SimulationTime;
    
    objectDetections = {};
    laneDetections   = [];
    isValidTime      = false(1, numSensors);
    isValidLaneTime  = false(1, numSensors);
    
    % Generate detections for each sensor
    for sensorIndex = 1:numSensors
        sensor = sensors{sensorIndex};
        % Generate the boundaries of all lanes relative to the ego car
        lanes = laneBoundaries(car, 'XDistance', linspace(0, sensor.MaxRange, 100));
        type = getDetectorOutput(sensor);
        if strcmp(type, 'Objects only')
            [objectDets, numObjects, isValidTime(sensorIndex)] = sensor(poses, time);
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes only')
            [laneDets, ~, isValidTime(sensorIndex)] = sensor(lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes and objects')
            [objectDets, numObjects, isValidTime(sensorIndex), laneDets, ~, isValidLaneTime(sensorIndex)] = sensor(poses, lanes, time);
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes with occlusion')
            [laneDets, ~, isValidLaneTime(sensorIndex)] = sensor(poses, lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        end
    end
    
    % Aggregate all detections into a structure for later use
    if any(isValidTime) || any(isValidLaneTime)
        allData(end + 1) = struct( ...
            'Time',       sc.SimulationTime, ...
            'ActorPoses', actorPoses(sc), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections',   {laneDetections}); %#ok<AGROW>
    end
    
    rbs = roadBoundaries(car);
    [position,yaw,length,width,originOffset,color] = targetOutlines(car);
    
    lb = laneBoundaries(car,'XDistance',0:2:40,'LocationType','Center', ...
        'AllBoundaries',false);
    plotLaneBoundary(rbsEdgePlotter,rbs)
    plotLaneBoundary(lblPlotter,{lb(1).Coordinates})
    plotLaneBoundary(lbrPlotter,{lb(2).Coordinates})
    plotOutline(olPlotter,position,yaw,length,width, 'OriginOffset',originOffset,'Color',color)
    pause(delta_t)
    
    %% Advance the scenario one time step and exit the loop if the scenario is complete
%     running = advance(sc);
    %--------above is for making plot----------------------
    %% main particle filter algorithm
%     log_x(i) = sc.Actors(1,1).Position(1,1);
%     log_y(i) = sc.Actors(1,1).Position(1,2);
%     obj1_x(i) = poses(1).Position(1,1); %id 1
%     obj1_y(i) = poses(1).Position(1,2);
%     obj1_yaw(i) = atan2(obj1_y(i), obj1_x(i));
%     
%     obj2_x(i) = poses(2).Position(1,1); %id 2
%     obj2_y(i) = poses(2).Position(1,2);
%     obj2_yaw(i) = atan2(obj2_y(i), obj2_x(i));

   %data accumulate ground truth data for comparison. this is the
   %validation data. Ground truth data.
   v_pos = sc.Actors(1,1).Position;
   
   %yaw rate define in one sample time(0.1s).Velocity in m/s, degree in radian 
   sc.Actors(1,1).AngularVelocity(1,3) = deg2rad(sc.Actors(1,1).AngularVelocity(1,3));
   sc.Actors(1,1).Yaw = deg2rad(sc.Actors(1,1).Yaw);
   velocity = sqrt(sc.Actors(1,1).Velocity(1,1) * sc.Actors(1,1).Velocity(1,1) + sc.Actors(1,1).Velocity(1,2) ...
                   * sc.Actors(1,1).Velocity(1,2));
               
   v_x_gt(i) = v_pos(1,1);
   v_y_gt(i) = v_pos(1,2);
   v_yaw_gt(i) = sc.Actors(1,1).Yaw;
   v_yaw_rate_gt(i) = sc.Actors(1,1).AngularVelocity(1,3);
   
   % measurement from noise GPS.
   v_x_noise(i) = v_pos(1,1) + normrnd(v_x_mu, v_x_sigma);
   v_y_noise(i) = v_pos(1,2) + normrnd(v_y_mu, v_y_sigma);
   v_yaw_noise(i) = sc.Actors(1,1).Yaw + normrnd(v_yaw_mu, v_yaw_sigma);
   %%
   %beacon initialization
   for j = 1:size_b
       b_x_gt(j) = sc.Actors(1,j+1).Position(1);
       b_y_gt(j) = sc.Actors(1,j+1).Position(2);

       b_x_rel(j) = poses(j).Position(1,1); % TODO: in future here should add noise + normrnd(radar_mu, radar_sigma)
       b_y_rel(j) = poses(j).Position(1,2); % TODO: in future here should add noise
       b_ori(j) = atan2(b_y_rel(j), b_x_rel(j)); % TODO: in future here should add noise
   end
   
   clear j;
   
   %Particle filter initialization. just run one time.
   if initialized == 0  
       %'particle filter initialization'
       %p_weight = 1/particles_num;
       p_weight = 1;

       % initializes the particles. The input of the particle is noise GPS
       % position and yaw angle.
       for k = 1 : particles_num
           v_x = v_x_noise(i) + normrnd(v_x_mu, v_x_sigma);
           v_y = v_y_noise(i) + normrnd(v_y_mu, v_y_sigma);
           v_yaw = v_yaw_noise(i) + normrnd(v_yaw_mu, v_yaw_sigma);
           particles(k) = Particle(k, v_x, v_y, v_yaw, p_weight);
       end
       f_x_log(i) = v_x;
       f_y_log(i) = v_y;
       f_yaw_log(i) = v_yaw;
       initialized = 1;
   else
       %iterate each particle for prediction
       for k = 1 : particles_num
           %yaw rate in radian in one sample time
           yaw_rate = sc.Actors(1,1).AngularVelocity(1,3);
           
           %yaw in radian
           yaw = particles(k).Yaw;
         
            % when yaw_rate is bigger than 0 degree
           if yaw_rate >= 0.00001
%                'yaw rate is not zero'
               particles(k).X = particles(k).X + (velocity/yaw_rate) * (sin(yaw + yaw_rate * delta_t) ...
                   - sin(yaw));
               particles(k).Y = particles(k).Y + (velocity/yaw_rate) * (cos(yaw) ...
                   - cos(yaw + yaw_rate * delta_t));
               particles(k).Yaw = yaw + yaw_rate * delta_t;

            % When yaw_rate is near to zero
           elseif yaw_rate < 0.00001
%                'yaw rate is zero'
               particles(k).X = particles(k).X + velocity * cos(yaw) * delta_t; 
               particles(k).Y = particles(k).Y + velocity * sin(yaw) * delta_t;
               test_x(k) = particles(k).X;
               test_y(k) = particles(k).Y;
           end

%            TODO: Add noise to each particle in particles
           particles(k).X = particles(k).X + normrnd(v_x_mu, v_x_sigma);
           particles(k).Y = particles(k).Y + normrnd(v_y_mu, v_y_sigma);
           particles(k).Yaw = particles(k).Yaw + normrnd(v_yaw_mu, v_yaw_sigma); %This line of code make estimated data gather in initialization position.
   
           % For plotting.
           particles_yaw(k) = particles(k).Yaw;
           particles_x(k) = particles(k).X;
           particles_y(k) = particles(k).Y;
       end
       clear k;
   end
   
   %prediction is finished above.
   %start to calculate the distance between each particle with beacons
   for n = 1 : particles_num
       %'3rd'
       %reset weight before weight update.
       particles(n).Weight = 1.0;
       x = particles(n).X;
       y = particles(n).Y;
       theta = particles(n).Yaw;

           for j = 1 : size_b
               %TODO : add calculate the transition matrix for landmark
               %position
%               x;
%               y;
%               theta;
%               j;
%               b_x_rel(j);
%               b_y_rel(j);
              
              xx = x + cos(theta) * b_x_rel(j) - sin(theta) * b_y_rel(j);
              yy = y + sin(theta) * b_x_rel(j) + cos(theta) * b_y_rel(j);

              dx = xx - b_x_gt(j);
              dy = yy - b_y_gt(j);

              %logging data for validation.
              dx_log(j) = dx;
              dy_log(j) = dy;

              % Weight probability calculation.
              prob_cons_part = 1 / (2 * pi * stdLandmarkRange * stdLandmarkBearing);
              prob_cons_part_log(j) = prob_cons_part;
              ff = (dx * dx) / (2 * stdLandmarkRange * stdLandmarkBearing);
              bb = (dy * dy) / (2 * stdLandmarkRange * stdLandmarkBearing);
              prob_exp_part = exp(-(ff + bb));
              prob_exp_part_log(j) = prob_exp_part;
              weight = prob_cons_part * prob_exp_part;
              b_weights(j) = weight;

               if weight == 0
                   particles(n).Weight = particles(n).Weight * 0.00001;%maintain a low weight
%                        'mvgd is zero !!!!!!!!'
               else
                   % if weight doesn't equal to zero, then weight should be 
                   % multiply by i times. because it is multivariate define.
                   particles(n).Weight = particles(n).Weight * weight;
               end
           end % iterate each beacons over here

      %final weight which contains all beacons relative distance
      %information of each particle
      weights(n) = particles(n).Weight;

  end %ietate each particle
      
  clear n;
  clear j;

  %%resampling step
  %'5th'
  for m = 1: particles_num
       weights(m) = particles(m).Weight;
  end
  clear m;
  size(weights);
  %normalized weights
  sum_weight = sum(weights);
  N_eff = 1/sum_weight;  % adaptive particle fitler. when n_eff smaller
  %than the num_paraticles/2 , then resampling is implemented.
  normed_weights = weights./sum(weights);
  max_weight = -99999;

  for m = 1:particles_num
      m;
      particles(m).Weight = normed_weights(m);
       if particles(m).Weight > max_weight
           max_weight = particles(m).Weight;
       end
  end
  
  clear m;

  index = fix(rand * particles_num)+1; % why + 1? Since matlab least index is 1. not like C++ is zero.

  beta = 0.0;

   for m = 1 : particles_num
       m;
       beta = beta + normrnd(0, max_weight) * 2;
       while beta > particles(index).Weight
           beta = beta - particles(index).Weight;
           % why +1? since matlab least index is 1. not like C++ is zero.
           index = mod(index + 1 , particles_num) + 1; 
       end

       new_x = particles(index).X;
       new_y = particles(index).Y;
       new_yaw = particles(index).Yaw;
       new_weight = particles(index).Weight;
       new_particles(m) = Particle(index, new_x, new_y, new_yaw, new_weight);
   end

   clear m;
   particles = new_particles;

   % Final output is new_particles which is weighted particles with
   % wheel method in udacity. 
% 
%    f_x = zeros(1,particles_num);
%    f_y = zeros(1,particles_num);
%    f_yaw = zeros(1,particles_num);
%    f_weight = zeros(1,particles_num);

   for m = 1 : particles_num
       highest_weight = -1;
       x = particles(m).X;
       y = particles(m).Y;
       yaw = particles(m).Yaw;
       w = particles(m).Weight;
       if w > highest_weight
           highest_weight = w;
           best_particle = particles(m);
           f_x = particles(m).X;
           f_y = particles(m).Y;
           f_yaw = particles(m).Yaw;
       end
       
       %TODO: this step is right?????????????????????? I think there is
       %something wrong here. 
%        f_x(m) = particles(m).X * particles(m).Weight;
%        f_y(m) = particles(m).Y * particles(m).Weight;
%        f_yaw(m) = particles(m).Yaw * particles(m).Weight;

   end

%    f_x = sum(f_x)
%    f_y = sum(f_y)
%    f_yaw = sum(f_yaw)
    f_x_log(i) = f_x;
    f_y_log(i) = f_y;
    f_yaw_log(i) = f_yaw;

   error_estimation(i) = distance(f_x_log(i),f_y_log(i), v_x_gt(i), v_y_gt(i));
   error_noise(i) = distance(v_x_noise(i), v_y_noise(i), v_x_gt(i), v_y_gt(i));
    
   %% update the iteration index i
   i = i+1;
end
%% plotting
% plotting after simulatino is finished.
'errror of estimation'
sum(error_estimation)
'error of noise'
sum(error_noise)

figure
plot(v_y_gt, v_x_gt, '*')
hold on
plot(f_y_log, f_x_log, 's')
hold on
plot(v_y_noise, v_x_noise, '^')
xlabel('global x axis')
ylabel('global y axis')
set(gca,'xdir','reverse')
%% scenario generate  
%------------------scenario generated function is defined in below ---------------------
% Restart the driving scenario to return the actors to their initial positions.
restart(sc);

% Release all the sensor objects so they can be used again.
for sensorIndex = 1:numSensors
    release(sensors{sensorIndex});
end

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function [sensors, numSensors] = createSensors(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensors{1} = radarDetectionGenerator('SensorIndex', 1, ...
    'SensorLocation', [1.9 0], ...
    'DetectionProbability', 1, ...
    'HasNoise', false, ...
    'HasOcclusion', false, ...
    'HasFalseAlarms', false, ...
    'FieldOfView', [360 5], ...
    'ActorProfiles', profiles);
sensors{2} = visionDetectionGenerator('SensorIndex', 2, ...
    'SensorLocation', [1.9 0], ...
    'DetectionProbability', 1, ...
    'FalsePositivesPerImage', 0, ...
    'DetectorOutput', 'Lanes and objects', ...
    'ActorProfiles', profiles);
numSensors = 2;
end

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario('SampleTime', 0.1)

% Add all road segments
roadCenters = [100 175 0;
    160 150 0;
    220 175 0];

lm = [laneMarking('Solid','Color','w'); ...
    laneMarking('Dashed','Color','y'); ...
    laneMarking('Dashed','Color','y'); ...
    laneMarking('Solid','Color','w')];
ls = lanespec(3,'Marking',lm);
road(scenario, roadCenters,'Lanes',ls);

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [100 175 0]);
waypoints = [100 175 0;
    160 150 0;
    220 175 0];

speed = 50;
trajectory(egoVehicle, waypoints, speed);

% Add the non-ego actors
actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.1, ...
    'Width', 0.1, ...
    'Height', 0.1, ...
    'Position', [169.5 211.2 0], ...
    'RCSPattern', [-8 -8;-8 -8]);

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.1, ...
    'Width', 0.1, ...
    'Height', 0.1, ...
    'Position', [120.1 160.2 0], ...
    'RCSPattern', [-8 -8;-8 -8]);

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.1, ...
    'Width', 0.1, ...
    'Height', 0.1, ...
    'Position', [148.3 142.9 0], ...
    'RCSPattern', [-8 -8;-8 -8]);

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.1, ...
    'Width', 0.1, ...
    'Height', 0.1, ...
    'Position', [166.3 146.3 0], ...
    'RCSPattern', [-8 -8;-8 -8]);

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.1, ...
    'Width', 0.1, ...
    'Height', 0.1, ...
    'Position', [181.9 150.3 0], ...
    'RCSPattern', [-8 -8;-8 -8]);

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.1, ...
    'Width', 0.1, ...
    'Height', 0.1, ...
    'Position', [134.2 195.8 0], ...
    'RCSPattern', [-8 -8;-8 -8]);

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.1, ...
    'Width', 0.1, ...
    'Height', 0.1, ...
    'Position', [154.3 202.6 0], ...
    'RCSPattern', [-8 -8;-8 -8]);

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.1, ...
    'Width', 0.1, ...
    'Height', 0.1, ...
    'Position', [114.3 217.9 0], ...
    'RCSPattern', [-8 -8;-8 -8]);

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.1, ...
    'Width', 0.1, ...
    'Height', 0.1, ...
    'Position', [89 200.8 0], ...
    'RCSPattern', [-8 -8;-8 -8]);

%     'Length', 0.24
%     'Width', 0.45, 
%     'Height', 1.7,

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.1, ...
    'Width', 0.1, ...
    'Height', 0.1, ...
    'Position', [72.5 150.9 0], ...
    'RCSPattern', [-8 -8;-8 -8]);

end

function output = getDetectorOutput(sensor)

if isa(sensor, 'visionDetectionGenerator')
    output = sensor.DetectorOutput;
else
    output = 'Objects only';
end
end
